/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 scene.gltf --types
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9
Title: Apple iPhone 13 Pro Max
*/

import { useLayoutEffect } from "react";
import { ECOLOR } from "@constant";
import { useGLTF } from "@react-three/drei";
import { Camera, useThree } from "@react-three/fiber";
import { gsap } from "gsap";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

import SceneBody from "./Partial/SceneBody";

export type GLTFResult = GLTF & {
  nodes: {
    Body_Mic_0: THREE.Mesh;
    Body_Bezel_0: THREE.Mesh;
    Body_Body_0: THREE.Mesh;
    Body_Wallpaper_0: THREE.Mesh;
    Body_Camera_Glass_0: THREE.Mesh;
    Body_Lens_0: THREE.Mesh;
    Body_Material_0: THREE.Mesh;
    Camera_Body_0: THREE.Mesh;
    Camera_Glass_0: THREE.Mesh;
    Camera_Camera_Frame001_0: THREE.Mesh;
    Camera_Mic_0: THREE.Mesh;
    Body001_Screen_Glass_0: THREE.Mesh;
    Button_Frame_0: THREE.Mesh;
    Circle003_Frame_0: THREE.Mesh;
    Apple_Logo_Logo_0: THREE.Mesh;
    Camera001_Body_0: THREE.Mesh;
    Camera001_Gray_Glass_0: THREE.Mesh;
    Camera001_Flash_0: THREE.Mesh;
    Camera001_Port_0: THREE.Mesh;
    Camera001_Camera_Frame_0: THREE.Mesh;
    Camera001_Camera_Glass_0: THREE.Mesh;
    Camera001_Lens_0: THREE.Mesh;
    Camera001_Black_Glass_0: THREE.Mesh;
    Camera003_Material002_0: THREE.Mesh;
    Frame_Frame_0: THREE.Mesh;
    Frame_Frame2_0: THREE.Mesh;
    Frame_Port_0: THREE.Mesh;
    Frame_Antenna_0: THREE.Mesh;
    Frame_Mic_0: THREE.Mesh;
  };
  materials: {
    material: THREE.MeshStandardMaterial;
    Bezel: THREE.MeshStandardMaterial;
    Body: THREE.MeshStandardMaterial;
    Wallpaper: THREE.MeshStandardMaterial;
    Camera_Glass: THREE.MeshStandardMaterial;
    Lens: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
    Glass: THREE.MeshStandardMaterial;
    ["Camera_Frame.001"]: THREE.MeshStandardMaterial;
    Screen_Glass: THREE.MeshStandardMaterial;
    Frame: THREE.MeshStandardMaterial;
    Logo: THREE.MeshStandardMaterial;
    Gray_Glass: THREE.MeshStandardMaterial;
    Flash: THREE.MeshStandardMaterial;
    Port: THREE.MeshStandardMaterial;
    Camera_Frame: THREE.MeshStandardMaterial;
    Black_Glass: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    Frame2: THREE.MeshStandardMaterial;
    Antenna: THREE.MeshStandardMaterial;
  };
};

interface CustomCamera {
  fov?: number;
}

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/scene.gltf") as GLTFResult;
  const camera = useThree<Camera & CustomCamera>((state) => state.camera);
  const scene = useThree((state) => state.scene);

  useLayoutEffect(() => {
    camera.position.set(0, 2, 6);
    materials.Body.color.set(ECOLOR.SierraBlue.hexColor);

    let fov = camera.fov;
    fov = (1400 * 18) / window.innerWidth;

    camera.fov = fov;
    // whenever we assign new values to camera properties, we need to call this function
    camera.updateProjectionMatrix();

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: "#phone-model",
        start: "top+=200 top",
        endTrigger: "#battery-section",
        end: "top top",
        scrub: true,
      },
    });

    tl.fromTo(camera.position, { y: 2 }, { y: 0 })
      .to(scene.rotation, { y: 0.8 })
      .to(scene.rotation, { y: 3 })
      .to(scene.rotation, { z: 1.58 })
      .to(camera.position, { z: 4 }, "key1")
      .to(scene.rotation, { y: 0, z: 0 }, "key1")
      .to(camera.position, { z: 6, x: -1 }, "key2")
      .to(scene.rotation, { z: 0, y: 6.3 }, "key3")
      .to(camera.position, { x: 0.8, y: 0 }, "key3");
  }, []);
  return <SceneBody props={props} nodes={nodes} materials={materials} />;
}

useGLTF.preload("/scene.gltf");
